<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethan.Penx Blog</title>
    <description>坐观垂钓者,徒有羡鱼情.</description>
    <link>http://EthanPen.github.io/</link>
    <atom:link href="http://EthanPen.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 26 Jun 2016 11:41:12 +0800</pubDate>
    <lastBuildDate>Sun, 26 Jun 2016 11:41:12 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Mixed Content</title>
        <description>&lt;p&gt;“ 如果一整天下来你都不是很开心，那么今天一定不是个好日子！”&lt;/p&gt;

&lt;h2 id=&quot;mixed-content-1-mixed-content&quot;&gt;Mixed Content 1: mixed-content&lt;/h2&gt;

&lt;p&gt;之前的在本地通过 jekyll serve 测试好的博客项目上传到Github之后，碰到了问题: &lt;strong&gt;Mixed Content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content&quot;&gt;So, what’s the Mixed Content?&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: When a user visits a page served over HTTPS, their connection with the web  server is encrypted with TLS and is therefore safeguarded from sniffers and  man-in-the-middle attacks. If the HTTPS page includes content retrieved through regular, cleartext HTTP, then the connection is only partially      encrypted; the unencrypted content is accessible to sniffers and can be     modified by man-in-the-middle attackers, so the connection is not           safeguarded. When a web page exhibits this behavior, it is called a mixed   content page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的，这个Mixed Content分为两种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mixed passive/display content&lt;/li&gt;
  &lt;li&gt;Mixed active content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;solving过程中碰到的Failed to load resource的页面&lt;a href=&quot;http://stackoverflow.com/questions/23688565/failed-to-load-resource-neterr-insecure-response&quot;&gt;ERR_INSECURE_RESPONSE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因为index.html页面需要获取到某种字体的方式为http，而Github pages又是https服务的，所以chrome锁定了获取字体的页面请求，试过将http指定为https方式不行，试过New tab来获取字体所在网站证书貌似还是不行，虽然可以在获取index.html页面地址栏点开小卫士图标来确认加载未经验证的内容（也就是要get的css以及font咯），但不能每次都这样访问吧，且其他访问者都不会注意到这个内容吧，而且手机端chrome访问都没有小卫士可以点啊。后来到深夜，实在困的不行就更改了原script获取的link，事先将css以及font下载好放置在项目结构中，这样就不用跳出去其他网站来获取这几个相应的resource了。拿自己的Nexus5试了下，底部的Weibo, Facebook, and Github分享框算是能出现了。
&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/MixedContent-homefooterpage.png&quot; width=&quot;260&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mixed-content-2-passwordless-auto-login-on-macos&quot;&gt;Mixed Content 2: Passwordless Auto login on MacOS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;前因:&lt;/strong&gt; 在阿里云服务平台上购买了服务器，每次SSH登录都要认证感觉不爽。&lt;br /&gt;
&lt;strong&gt;后果:&lt;/strong&gt; 不改变Mac上使用 &lt;strong&gt;Terminal.app&lt;/strong&gt; 的习惯，实现点击自动登录服务器。&lt;/p&gt;

&lt;p&gt;之前使用Mac自带Terminal.app的体验很好，主要是很喜欢terminal.app提供的Theme: pro，然后ta也提供了ssh功能。使用SecureCRT等软件，需要打开软件，然后找到相应主机再打开，再输入密码，这，太不纯粹。&lt;/p&gt;

&lt;p&gt;Google了一圈，感觉并么有多少够纯粹的方式，Solving过程中自己了解到相关的东西，用比较简单的方式搞定,分为两步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Login &lt;strong&gt;Passwordless&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Auto&lt;/strong&gt; Login&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;passwordless-login&quot;&gt;Passwordless Login&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://coolestguidesontheplanet.com/make-passwordless-ssh-connection-osx-10-9-mavericks-linux/&quot;&gt;Make a passwordless SSH Connection between MacOS and Linux Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这一步需要做的就是在本地生成一份公钥和私钥，然后将&lt;strong&gt;公钥&lt;/strong&gt;添加到服务器的认证列表中来实现会话中的Passwordless&lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;本地公私密钥生成&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 在～目录下创建并更换其权限
~$ mkdir .ssh 
~$ chmod go-rwx .ssh

＃生成公钥和私钥，命令中最后的双引号没有给出私钥的密码，所以才实现Passwordless访问
.ssh$ ssh-keygen -b 1024 -t rsa -f id_rsa -P &quot;&quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行完操作后本地端会生成 &lt;strong&gt;id_rsa&lt;/strong&gt; 以及 &lt;strong&gt;id_rsa.pub&lt;/strong&gt;。&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;远端公钥分享&lt;/h5&gt;
&lt;p&gt;将本地端生成 &lt;strong&gt;id_rsa.pub&lt;/strong&gt;的内容，拷贝到远端。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#远端创建
.ssh$ touch authorized_keys
#本地内容拷贝
.ssh$ cat id_rsa.pub
ssh-rsa  AAAAB3NzaC1yc2EAAAABIwAAAIEA2CtcmYRmQJX04pZnrTPrU68BZMk9YlbI6CUcFUp
RVw29p V7mxW16wd/q9z7n+xytqdp4wsAc/7+24ZVikMhhRetEGr3LSBz5gm9980oTPEy61+pDP2y
jafShe5xcszIUnQ rN1ohCuF7Y/a/TG6G6gaJGcLexUiwfTRtCAbpuzfU= username@yourcomputer.local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用&lt;strong&gt;Vim&lt;/strong&gt;编辑器将文件内容拷贝好后更改权限。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.ssh$ chmod u-w authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到此步之后再去SSH服务器可以实现Passwordless访问了。&lt;/p&gt;

&lt;h4 id=&quot;auto-login&quot;&gt;Auto Login&lt;/h4&gt;

&lt;p&gt;这一步需要做的就是将输入 &lt;strong&gt;ssh serverdomain&lt;/strong&gt; 的操作化成点击操作了。
Mac上创建后缀为.command的文件，输入内容 &lt;strong&gt;ssh user@serverdomainname&lt;/strong&gt;，将其放置在Dock栏中。
&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/MixedContent-AutoLoginFile.png&quot; width=&quot;260&quot; /&gt;
其中的user字符以及serverdomainname字符需要更换成相应项。 一般情况下是 ssh root@yourServerIP 了。
至此Passwordless Auto Login on Mac 就完事儿了。
&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/MixedContent-AutoLogin.png&quot; width=&quot;460&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/06/25/Mixed-Content/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/06/25/Mixed-Content/</guid>
        
        <category>前端</category>
        
        <category>Mac</category>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Hello Blog</title>
        <description>&lt;p&gt;“ Life got real, moving on. ”&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;Ethan 的 Blog 应是落地于此了。&lt;/p&gt;

&lt;p&gt;这一学期不出几日便要结束了，江南メ星也总算是更换了个瞎写东西的地方。&lt;/p&gt;

&lt;p&gt;先前的博文挂放在&lt;a href=&quot;http://www.iteye.com/&quot;&gt;iTeye&lt;/a&gt;平台上，想想有些地方应该是不酷的。譬如，私人定制性不强，不酷；不太习惯地富文本编辑器，不酷。。。总而言之，就是不酷吧！&lt;/p&gt;

&lt;p&gt;一件事不够酷，去做的积极性就不会高。之前生活中碰到的需要去记录、瞎写、总结的东西，却趁着&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;MarkDown&lt;/a&gt;的优雅体验都存放到设备本地了，而奈何自用的设备为乞丐版MacPro13，且加上捉急的文档管理习惯，总让自己觉得不纯粹，不酷。 记得去年在上海实习的时候应该就有所耳闻过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，很有时尚感。&lt;/p&gt;

&lt;p&gt;这种博客的搭建方式很受推荐，我个人也很是喜欢这种Blog Post出来的效果。
当然它还有些其他的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;流行的Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;GitHub Pages 提供的贴心服务，也不用去搞数据库、主机什么的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 让你更专注于写作。&lt;/li&gt;
  &lt;li&gt;可以修改下DNS加个CNAME绑定自己的域名。&lt;/li&gt;
  &lt;li&gt;Jekyll 较强的自定制性，各种模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然在这之前我对涉及到的Jekyll及ruby等是不熟悉的，所以也有去YouTube上过了套Jekyll的课程， 跟视频实践Demo &lt;a href=&quot;https://ethanpen.github.io/planets-of-the-universe/&quot;&gt;&lt;strong&gt;planets-of-the-universe&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;致谢&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;博客的Theme大致是基于有名的&lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog-jekyll&quot;&gt;Clean Blog-IronSummitMedia/startbootstrap-clean-blog-jekyll&lt;/a&gt;，以及 &lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io&quot;&gt;Huxpro&lt;/a&gt; 的部分修改，感谢作者！&lt;/li&gt;
  &lt;li&gt;感谢 Jekyll、Github Pages 和 Bootstrap!&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/06/21/Hello-Blog/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/06/21/Hello-Blog/</guid>
        
        <category>Life</category>
        
        
      </item>
    
  </channel>
</rss>
