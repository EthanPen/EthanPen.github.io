<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethan.Penx Blog</title>
    <description>坐观垂钓者,徒有羡鱼情.</description>
    <link>http://EthanPen.github.io/</link>
    <atom:link href="http://EthanPen.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 30 Jul 2016 21:00:25 +0800</pubDate>
    <lastBuildDate>Sat, 30 Jul 2016 21:00:25 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title> Network Ports Scanner </title>
        <description>&lt;h2 id=&quot;port-scanner&quot;&gt;Port Scanner&lt;/h2&gt;

&lt;p&gt;Port scanner is an application designed to probe a &lt;strong&gt;server&lt;/strong&gt; or &lt;strong&gt;host&lt;/strong&gt; for open ports. A port scan is a process that sends client requests to a range of server port addresses on a host, with a goal of finding an active port.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/PortScanner-execute.png&quot; width=&quot;820&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;tcpip-basic-knowledge&quot;&gt;TCP/IP basic knowledge&lt;/h4&gt;

&lt;p&gt;The design and operation of the internet is based on the &lt;strong&gt;Internet Protocol Suite&lt;/strong&gt;, commonly also called &lt;strong&gt;TCP/IP&lt;/strong&gt;. In this system, hosts and host services are referenced using two components: an address and a port number. There are 65536 distinct and usable port numbers.&lt;/p&gt;

&lt;h3 id=&quot;types&quot;&gt;Types&lt;/h3&gt;

&lt;h5 id=&quot;tcp-scanning&quot;&gt;1. TCP scanning&lt;/h5&gt;
&lt;p&gt;The simplest port scanners use the operating system’s network function and are generally the next option to go to when &lt;strong&gt;SYN&lt;/strong&gt; is not a feasible option. &lt;strong&gt;Nmap&lt;/strong&gt; calls this mode connect scan, named after the Unix connect() system call. if a port is open, the operating system completes the &lt;strong&gt;TCP three-way handshake&lt;/strong&gt;, and the port scanner immediately closes the connection to avoid performing a &lt;strong&gt;Denial-of-service attack&lt;/strong&gt;. Otherwise an error code is returned. This scan mode has the advantage that the user does not requires special privileges. However, using the OS network function prevents low-level control, so this scan type is less common.&lt;/p&gt;

&lt;h5 id=&quot;syn-scanning&quot;&gt;2. SYN scanning&lt;/h5&gt;
&lt;p&gt;SYN scan is another form of TCP scanning. Rather than use the operating system’s network functions, the port scanner generates raw IP packets itself, and monitor for responses. This scan type is also known as “half-open scanning”, because it &lt;strong&gt;never&lt;/strong&gt; actually opens a full TCP connection. The port scanner generates a SYN packet. If the target port is open, it will respond with a SYN-ACK packet. The scanner host responds with an RST packet, closing the connection before the handshake is completed. If the port is closed but unfiltered, the target will instantly respond with on RST packet.&lt;br /&gt;
The use of raw networking has several advantages, giving the scanner full control of the packets sent and the timeout for responses, and allowing detailed reporting of the responses. There is debate over which scan is less intrusive on the target host. SYN scan has the advantage that the individual services never actually receive a connection. However, the RST during the handshake can cause problems for some network stacks, in particular simple devices like printers. There are no conclusive arguments either way.&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;h4 id=&quot;argsparse&quot;&gt;argsparse&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://pymotw.com/2/argparse/&quot;&gt;argparse – Command line option and argument parsing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://songpengfei.iteye.com/blog/1320877&quot;&gt;Argparse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jianboqi/archive/2013/01/10/2854726.html&quot;&gt;introduction to Argparse&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;&#39;&#39; Use argparse module &#39;&#39;&#39;
		parser = argparse.ArgumentParser(usage=&#39;Network Port Scanner&#39;, description=&#39; example of using: python PortScan.py -hn baidu.com -p 80-500 &#39;)
	
		parser.add_argument(&#39;-hn&#39;, &#39;--host&#39;)
		parser.add_argument(&#39;-p&#39;, &#39;--port&#39;)
	
		args = parser.parse_args()
		argPort = args.port.split(&#39;-&#39;)
	
		HostOrHName = args.host
		StartPort, EndPort = int(argPort[0]), int(argPort[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/PortScanner-args-help.png&quot; width=&quot;820&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-threading&quot;&gt;Multiple Threading&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt;threading module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pymotw.com/2/threading/&quot;&gt;threading – Manage concurrent threads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subclass Thread and Creates Subclass Instance&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MyThread(threading.Thread):
		def __init__(self, func, port):
			threading.Thread.__init__(self)
			self.func = func
			self.port = port
	
		def run(self):
			apply(self.func, (self.port,))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-whole-code&quot;&gt;The whole code&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: utf-8 -*-

import sys
import argparse
from socket import *
import threading
from time import sleep, ctime

# &#39;&#39;&#39; PortScan.py &amp;lt;host&amp;gt; &amp;lt;StartPort&amp;gt;-&amp;lt;EndPort&amp;gt; &#39;&#39;&#39;
# host = sys.argv[1]
# PortStrs = sys.argv[2].split(&#39;-&#39;)
# 
# StartPort = int(PortStrs[0])
# EndPort = int(PortStrs[1])


class MyThread(threading.Thread):
	def __init__(self, func, port):
		threading.Thread.__init__(self)
		self.func = func
		self.port = port

	def run(self):
		apply(self.func, (self.port,))

def TcpTest(port):
	sock = socket(AF_INET, SOCK_STREAM)
	sock.settimeout(4)
	result = sock.connect_ex((targetIp, port))
	if result == 0: 
		print &quot;Opened Port: &quot;, port

if __name__ == &#39;__main__&#39;:
	&#39;&#39;&#39; Use argparse module &#39;&#39;&#39;
	parser = argparse.ArgumentParser(usage=&#39;Network Port Scanner&#39;, description=&#39; example of using: python PortScan.py -hn baidu.com -p 80-500 &#39;)

	parser.add_argument(&#39;-hn&#39;, &#39;--host&#39;)
	parser.add_argument(&#39;-p&#39;, &#39;--port&#39;)

	args = parser.parse_args()
	argPort = args.port.split(&#39;-&#39;)

	HostOrHName = args.host
	StartPort, EndPort = int(argPort[0]), int(argPort[1])
	targetIp = gethostbyname(HostOrHName)
	print &#39;HostOrHName: %s  and targetIp: %s&#39; % (HostOrHName, targetIp)
	
	print &#39;start at: %s \n&#39; % ctime()
	threads = []

	for port in range(StartPort, EndPort + 1):
		t = MyThread(TcpTest, port)
		threads.append(t)
	
	for i in range(len(threads)):
		threads[i].start()
	
	for i in range(len(threads)):
		threads[i].join()
	
	print &#39;\nall DONE at: %s&#39; % ctime()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The End.&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 30 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/07/30/Ports-Scanner/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/07/30/Ports-Scanner/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title> Superimposed Picture </title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景须知&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;照片模式&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1位像素，黑和白，存成8位的像素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;8位像素，黑和白&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;8位像素，使用调色板映射到任何其他模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RGB&lt;/td&gt;
&lt;td&gt;3 x 8 位像素，真彩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RGBA&lt;/td&gt;
&lt;td&gt;4 x 8 位像素，真彩 + 透明通道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMYK&lt;/td&gt;
&lt;td&gt;4 x 8 位像素，颜色隔离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YCbCR&lt;/td&gt;
&lt;td&gt;3 x 8 位像素， 彩色视频格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;32 位整型像素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;32 位浮点型像素&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;常见的照片格式中 .png 属于 RGBA 模式，而 .jpg 格式属于 RGB 模式，如下代码所示。&lt;br /&gt;
RGB 分别代表红、绿、蓝三个通道的颜色，这个标准几乎包括人类所能感知的所有颜色。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import os, Image
&amp;gt;&amp;gt;&amp;gt; lsd = os.listdir(&#39;.&#39;)
&amp;gt;&amp;gt;&amp;gt; lsd
[&#39;.DS_Store&#39;, &#39;2048.py&#39;, &#39;ascii.py&#39;, &#39;ascii_dora.png&#39;, &#39;createNecImg_0.5_.png&#39;, &#39;model2048.py&#39;, &#39;output.txt&#39;, &#39;test.png&#39;, &#39;trapic.py&#39;, &#39;utput.txt&#39;]
&amp;gt;&amp;gt;&amp;gt; im = Image.open(os.getcwd() + &#39;/&#39; + lsd[-3])
&amp;gt;&amp;gt;&amp;gt; im
&amp;lt;PngImagePlugin.PngImageFile image mode=RGBA size=1485x2110 at 0x109B718C0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; 

# example of some color
[0,0,0] — black
[255,0,0] — Red
[0,255,0] — green
[0,0,255] — blue
[255,255,255] — white
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;两张照片层叠的两种方式&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;两张照片同一点的像素按照一定比例叠加。假设两张照片同一点的像素分别为A、B，则层叠之后该点像素点为: A•alpha + B•(1-alpha)  — (0 &amp;lt; alpha &amp;lt; 1）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正片叠底。结果色 = 混合色 * 基色 / 255，PS中也采用这种方式； 正片叠底的特点： 明度变化：混合色不会大于255，故结果色一定小于1，混合模式之后必定比基色暗。0为黑色，若混合两色中有黑色，混合之后必定是黑色。若有白色，则混合色为另外一色的原色。故正片叠底可以改变非黑即白，处于灰度区间的明度，变黑。可以采用操作像素点，提高像素点的亮度。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-3&quot;&gt;用到的库&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;PIL: Python Imaging Library&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pillow.readthedocs.io/en/3.1.x/index.html&quot;&gt;pillow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pythonware.com/products/pil/&quot;&gt;Python Imaging Library (PIL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Numpy&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://cs231n.github.io/python-numpy-tutorial/&quot;&gt;Python Numpy tutorials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.numpy.org/&quot;&gt;Numpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#coding: utf-8

from __future__ import division
import PIL
import Image
import numpy
import os
import random
import numexpr
import time
import ImageFont, ImageDraw
STAG = time.time()

# W_num: how many image in a row
# H_num: how many image in a hor
# W_size: width of an image
# H_size: height of an image
# root: root path of the script

root = &quot;/Users/xing/Desktop/resoures/&quot;
W_num = 13
H_num = 13
W_size = 640
H_size = 360

# aval: stored all of the image
aval = []
alpha = 0.5

def getAllphotos():
# 	root = os.getcwd() + &quot;/&quot;
	src = root + &quot;photos/&quot;
	for i in os.listdir(src):
		if os.path.splitext(src + i)[-1] == &quot;.png&quot;:
			aval.append(src + i)
			
			


# formating the image size 
def transfer(img_path, dst_width, dst_height):
	im = Image.open(img_path)
	if im.mode != &quot;RGBA&quot;:
		im = im.convert(&quot;RGBA&quot;)
	s_w, s_h = im.size
	
	if s_w &amp;lt; s_h:
		im = im.rotate(90)
	
	STA = time.time()
	resized_img = im.resize((dst_width, dst_height))	
# 	print &quot;Transfer Func Time %s&quot; % (time.time()-STA)
# 	print numpy.array(resized_img)[:dst_height, :dst_width]
	
	return numpy.array(resized_img)[:dst_height, :dst_width]
		
		
# create and save a new image
def createNevImg():
	iW_size = W_num * W_size
	iH_size = H_num * H_size
		
	I = numpy.array(transfer(root + &quot;Ethan.png&quot;, iW_size, iH_size))
	I = numexpr.evaluate(&quot;&quot;&quot;I * (1 - alpha)&quot;&quot;&quot;)
	
	for i in range(W_num):
		for j in range(H_num):
			SH = I[(j * H_size):((j + 1) * H_size), (i * W_size):((i + 1) * W_size)]
			STA = time.time()
			DA = transfer(random.choice(aval), W_size, H_size)
# 			print &quot;Call Func Time %s&quot; % (time.time()-STA)
			res = numexpr.evaluate(&quot;&quot;&quot;SH + DA * alpha&quot;&quot;&quot;)
			I[(j * H_size):((j + 1) * H_size), (i * W_size):((i + 1) * W_size)] = res
	
	Image.fromarray(I.astype(numpy.uint8)).save(&quot;createNecImg_%s_.png&quot; % alpha)
	

if __name__ == &quot;__main__&quot;:
	getAllphotos()
	createNevImg()

	print &quot;Total time %s&quot; % (time.time()-STAG)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;本脚本的核心部分&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def createNevImg():
	&#39;&#39;&#39;
	&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;root+’Ethan.png’是要与拼接之后的照片进行层叠的照片. 利用numpy.array的方法将其转换成矩阵I, I的大小为(W_num•W_size, H_num•H_size)，是伸缩照片生成矩阵的W_num•H_num倍; 调用numexpr.evaluate方法，将矩阵中每个元素都乘以(1-alpha).&lt;/p&gt;

&lt;p&gt;接下来的双重遍历便是具体拼接的实现。&lt;br /&gt;
由于矩阵I的规模是伸缩照片生成矩阵的 W_num•H_num倍，所以我们从左向右，从上向下依次取(W_size, H_size)大小的矩阵SH&lt;/p&gt;

&lt;p&gt;计算SH+DA*alpha，并将结果放回SH在I矩阵中位置。这里是将两张照片中相同一点的像素分别乘以(1-alpha)、alpha，然后相加，如此两个照片便层叠在一块。&lt;/p&gt;

&lt;p&gt;alpha的取值可以自己设置，这里设置的是0.5。且此处选择的层叠的方法是第一种，将两张照片同一点的像素按照一定比例想加，这里选择的是alpha=0.5。
调用fromarray方法将矩阵I转为图片对象，并保存为createNevImage_0.5_.png，照片如下图所示。&lt;/p&gt;

&lt;p&gt;将本文的主题图用做了进行层叠的照片，运行代码得到如下效果图。用作拼接的是我 iPad 的图库中部分图片。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/createNecImg_0.5_.png&quot; width=&quot;820&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-related&quot;&gt;The Related&lt;/h2&gt;

&lt;h4 id=&quot;numexpr&quot;&gt;numexpr&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/numexpr&quot;&gt;numexpr 2.6.1&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;ospathsplitextpath&quot;&gt;os.path.splitext(path)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;os.path.splitext(path)
	Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored; splitext(&#39;.cshrc&#39;) returns (&#39;.cshrc&#39;, &#39;&#39;).
	
	Changed in version 2.6: Earlier versions could produce an empty root when the only period was the first character.
	

&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; lsd = os.listdir(&#39;.&#39;)
&amp;gt;&amp;gt;&amp;gt; lsd[1][-4:]
&#39;.jpg&#39;
&amp;gt;&amp;gt;&amp;gt; lsd[10][-4:]
&#39;.png&#39;
&amp;gt;&amp;gt;&amp;gt; imPath = os.getcwd() + &#39;/&#39;
&amp;gt;&amp;gt;&amp;gt; imPath
&#39;/Users/xing/Desktop/resoures/photos/Image/&#39;
&amp;gt;&amp;gt;&amp;gt; os.path
&amp;lt;module &#39;posixpath&#39; from &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(os.path)
&amp;lt;type &#39;module&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; os.path.splitext(imPath + lsd[1])
(&#39;/Users/xing/Deskt	op/resoures/photos/Image/2014-11-15 102434&#39;, &#39;.jpg&#39;)
&amp;gt;&amp;gt;&amp;gt; os.path.splitext(imPath + lsd[1])[-1]
&#39;.jpg&#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;pilimagefrom&quot;&gt;PIL.Image.from&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PIL.Image.fromarray(obj, mode=None)
Creates an image memory from an object exporting the array interface (using the buffer protocol).

If obj is not contiguous, then the tobytes method is called and frombuffer() is used.

Parameters:	
obj – Object with array interface
mode – Mode to use (will be determined from type if None) See: Modes.
Returns:	
An image object.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/07/21/Superimposed-Picture/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/07/21/Superimposed-Picture/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Convert the Picture to Ascii</title>
        <description>&lt;h2 id=&quot;python-code&quot;&gt;Python code&lt;/h2&gt;

&lt;p&gt;convert a picture to text.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from PIL import Image
import argparse

# turn all of the ascii_char to list [&#39;$&#39;, &#39;@&#39;, ...., &#39;.&#39;]
ascii_char = list(&quot;$@B%8&amp;amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~&amp;lt;&amp;gt;i!lI;:,\&quot;^`&#39;. &quot;)

# generate an instance of argument parser 
parser = argparse.ArgumentParser()

parser.add_argument(&#39;file&#39;)		# input file
parser.add_argument(&#39;-o&#39;, &#39;--output&#39;)	# output file
parser.add_argument(&#39;--width&#39;, type = int, default = 80) 
parser.add_argument(&#39;--height&#39;, type = int, default = 80)

# acquire arguments
args = parser.parse_args()


IMG = args.file
WIDTH = args.width
HEIGHT = args.height
OUTPUT = args.output


def get_char(r, b, g, alpha = 256):
	if alpha == 0:
		return &#39; &#39;
	length = len(ascii_char)
	gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)
	unit = (256.0 + 1) / length
	return ascii_char[int(gray/unit)]
	

if __name__ == &#39;__main__&#39;:
	
	im = Image.open(IMG)
	im = im.resize((WIDTH, HEIGHT), Image.NEAREST)
	txt = &quot;&quot;
	
	for i in range(HEIGHT):
		for j in range(WIDTH):
			txt += get_char(*im.getpixel((j, i)))
		txt += &#39;\n&#39;
		
	print txt

if OUTPUT:
	with open(OUTPUT, &#39;w&#39;) as f:
		f.write(txt)
else:
	with open(&quot;output.txt&quot;, &#39;w&#39;) as f:
		f.write(txt)

# python it in Terminal		
MBP-Ethan:shiyanlou xing$ python ascii.py ascii_dora.png 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the Output.txt&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/PicturetoAscii.png&quot; width=&quot;520&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;parse&quot;&gt;Parse&lt;/h2&gt;

&lt;p&gt;The key point of this script is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;txt += get_char(*im.getpixel((j, i)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using the &lt;strong&gt;im.getpixel()&lt;/strong&gt; method to get the pixel of the Picture.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import Image
&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.listdir(&#39;.&#39;)
[&#39;.DS_Store&#39;, &#39;ascii.py&#39;, &#39;ascii_dora.png&#39;, &#39;output.txt&#39;, &#39;test.png&#39;, &#39;utput.txt&#39;]
&amp;gt;&amp;gt;&amp;gt; im = Image.open(os.listdir(&#39;.&#39;)[2])
&amp;gt;&amp;gt;&amp;gt; h, w = im.size
&amp;gt;&amp;gt;&amp;gt; im.getpixel((h/2, w/2))
(255, 255, 255, 255)
&amp;gt;&amp;gt;&amp;gt; im.getpixel((h/4, w/4))
(0, 160, 233, 255)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then called the &lt;strong&gt;get_char()&lt;/strong&gt; function convert it to character.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def get_char(r, b, g, alpha = 256):
	if alpha == 0:
		return &#39; &#39;
	length = len(ascii_char)
	gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)
	unit = (256.0 + 1) / length
	return ascii_char[int(gray/unit)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mapping pixel to sequence ascii characters.  step by step:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ac = list(&quot;$@B%8&amp;amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~&amp;lt;&amp;gt;i!lI;:,\&quot;^`&#39;. &quot;)
&amp;gt;&amp;gt;&amp;gt; ac
[&#39;$&#39;, &#39;@&#39;, &#39;B&#39;, &#39;%&#39;, &#39;8&#39;, &#39;&amp;amp;&#39;, &#39;W&#39;, &#39;M&#39;, &#39;#&#39;, &#39;*&#39;, &#39;o&#39;, &#39;a&#39;, &#39;h&#39;, &#39;k&#39;, &#39;b&#39;, &#39;d&#39;, &#39;p&#39;, &#39;q&#39;, &#39;w&#39;, &#39;m&#39;, &#39;Z&#39;, &#39;O&#39;, &#39;0&#39;, &#39;Q&#39;, &#39;L&#39;, &#39;C&#39;, &#39;J&#39;, &#39;U&#39;, &#39;Y&#39;, &#39;X&#39;, &#39;z&#39;, &#39;c&#39;, &#39;v&#39;, &#39;u&#39;, &#39;n&#39;, &#39;x&#39;, &#39;r&#39;, &#39;j&#39;, &#39;f&#39;, &#39;t&#39;, &#39;/&#39;, &#39;\\&#39;, &#39;|&#39;, &#39;(&#39;, &#39;)&#39;, &#39;1&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39;, &#39;]&#39;, &#39;?&#39;, &#39;-&#39;, &#39;_&#39;, &#39;+&#39;, &#39;~&#39;, &#39;&amp;lt;&#39;, &#39;&amp;gt;&#39;, &#39;i&#39;, &#39;!&#39;, &#39;l&#39;, &#39;I&#39;, &#39;;&#39;, &#39;:&#39;, &#39;,&#39;, &#39;&quot;&#39;, &#39;^&#39;, &#39;`&#39;, &quot;&#39;&quot;, &#39;.&#39;, &#39; &#39;]
&amp;gt;&amp;gt;&amp;gt; import Image
&amp;gt;&amp;gt;&amp;gt; picPath = &#39;/Users/xing/Documents/shiyanlou/ascii_dora.png&#39;
&amp;gt;&amp;gt;&amp;gt; im = Image.open(picPath)
&amp;gt;&amp;gt;&amp;gt; h, w = im.size
&amp;gt;&amp;gt;&amp;gt; pix = im.getpixel((h/3, w/3))
&amp;gt;&amp;gt;&amp;gt; pix
(45, 31, 34, 255)
&amp;gt;&amp;gt;&amp;gt; length = len(ac)
&amp;gt;&amp;gt;&amp;gt; r, b, g, alpha = pix
&amp;gt;&amp;gt;&amp;gt; gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)
&amp;gt;&amp;gt;&amp;gt; gray
36
&amp;gt;&amp;gt;&amp;gt; unit = (256.0 + 1) / length
&amp;gt;&amp;gt;&amp;gt; unit
3.6714285714285713
&amp;gt;&amp;gt;&amp;gt; int(gray / unit)
9
&amp;gt;&amp;gt;&amp;gt; ac[9]
&#39;*&#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;argparse-module&quot;&gt;Argparse module&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://songpengfei.iteye.com/blog/1320877&quot;&gt;Argparse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jianboqi/archive/2013/01/10/2854726.html&quot;&gt;introduction to Argparse&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/07/10/Convert-the-Picture-to-Ascii/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/07/10/Convert-the-Picture-to-Ascii/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title> Get the Subtitle</title>
        <description>&lt;h2 id=&quot;get-the-subtitle&quot;&gt;Get the Subtitle&lt;/h2&gt;

&lt;p&gt;Avatar: The last Airbender, 起初是为了练习英语听力及口语而了解的一部动漫，评价很是不错，看了下来之后确实很是喜欢。从网上 Download 下来 .srt 文件，打印之的话，其中的时间行却是无用。 自己写了个小脚本将字幕提取了出来。
这部剧有三季，Download 下来三季的 zip 包，解压缩后放置在桌面上各季的文件夹中。分别新建文件夹用来保存脚本生成的 .txt 文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import re
import os

fPath = &quot;/Users/xing/Desktop/Avatar_The_Last_Airbender - season 1.en&quot;
sPath = &quot;/Users/xing/Desktop/Avatar_The_Last_Airbender_subtitle/&quot;

os.chdir(fPath)
flist = os.listdir(fPath)

for eachFile in flist[1:]:
	with open(eachFile) as F:
		subTxt = F.read()
		subTxtList = re.findall(r&#39;[^\n][a-zA-Z]+.*\n&#39;, subTxt)
		print subTxtList
		fullSPath = os.path.join(sPath, eachFile+&#39;.txt&#39;)
		fileSave = open(fullSPath, &#39;w&#39;)
		for eachline in subTxtList[:-2]:
			fileSave.write(eachline+&#39;\n&#39;)
		fileSave.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;avatar-the-last-airbender&quot;&gt;Avatar: The last Airbender&lt;/h2&gt;

&lt;p&gt;这部剧在 IMDB 的评分：&lt;a href=&quot;http://www.imdb.com/title/tt0417299/&quot;&gt;Avatar: The Last Airbender(IMDB)&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;basic&quot;&gt;Basic&lt;/h4&gt;

&lt;p&gt;《最后的风之子》是由派拉蒙影业公司出品，由M·奈特·沙马兰执导，诺亚·林格、戴夫·帕特尔、妮可拉·佩尔茨、杰克逊·拉斯波恩领衔主演的奇幻片。
该片根据动画系列片《降世神通：最后的气宗》改编，讲述了世界被四大神力“气、火、水、土”支配着，其中被称为“神通”的便是世上唯一同时拥有这四种神力的人，他可以阻止邪恶的火烈国征服世界的故事。
影片于2010年7月1日在美国上映，2010年8月23日在中国内地上映。&lt;/p&gt;

&lt;h4 id=&quot;backstory&quot;&gt;BackStory&lt;/h4&gt;

&lt;p&gt;全世界被战火吞噬，没有人能够阻止无法避免的毁灭。一个世纪以来，烈火国一直在全世界开战，企图征服其它的三个部族，大气牧族、水族部落以及大地国。烈火国对于被他们强大的军力击败的村落只给了一个选择，完全投降或是彻底毁灭。当世界各地的村民徒然地试着自卫，同时也极力保护少数拥有他们部族的神力，并且能够随心所欲驾驭属于他们部族的元素的神通。但是拥有模庞大的军队以及毁灭性强大的武器的烈火国，早就消灭了地球上每一个风之子。如今他们把目标转向水族部落，准备攻下北极水族的城堡。某天，一名年轻的截水神通凯塔拉（妮可拉·佩尔茨饰）和她的哥哥苏卡（杰克逊·拉斯波恩饰）一起练习她的截水技巧，意外发现一个名字叫安的小男孩（诺亚·林格饰），但是当安展现出御气的能力，凯塔拉和苏卡发现，他们找到的不只是最后的风之子。身为被预言的降世神通－唯一能够同时拥有四大神力的人，这个小小的风之子是唯一拥有击退烈火国猛烈攻击的能力，并且最后将为饱受战火荼毒的世界带来和谐的神通王。但是他能学会其它的三大神力，成为他注定要当的英雄，并且及时拯救世界吗。&lt;/p&gt;

&lt;h4 id=&quot;wikipedia-the-last-airbender&quot;&gt;Wikipedia: The last Airbender&lt;/h4&gt;

&lt;p&gt;This article is about the TV series. For the 2010 film, see The Last Airbender.
Avatar: The Last Airbender
Avatar The Last Airbender logo.svg
Also known as	Avatar: The Legend of Aang
Genre	
Action/Adventure
Fantasy
Comedy-drama
Created by	
Michael Dante DiMartino
Bryan Konietzko
Written by	
Michael Dante DiMartino
Bryan Konietzko
Aaron Ehasz
Tim Hedrick
John O’Bryan
Elizabeth Welch Ehasz
Joshua Hamilton
May Chan
Matthew Hubbard
James Eagan
Directed by	
Lauren MacMullan
Dave Filoni
Giancarlo Volpe
Ethan Spaulding
Joaquim Dos Santos
Voices of	
Zach Tyler Eisen
Mae Whitman
Jack DeSena
Jessie Flower
Dante Basco
Dee Bradley Baker
Jennie Kwan
Mako (Seasons 1–2)
Greg Baldwin (Season 3)
Mark Hamill
Grey DeLisle
Jason Isaacs
Clancy Brown
Composer(s)	Jeremy Zuckerman, Benjamin Wynn
Country of origin	United States
Original language(s)	English
No. of seasons	3
No. of episodes	61 (list of episodes)
Production
Executive producer(s)	
Michael Dante DiMartino
Bryan Konietzko
Aaron Ehasz
Running time	22 minutes
Production company(s)	
Nickelodeon Animation Studios
DR Movie
JM Animation
MOI Animation
Titmouse (opening)[1]
Release
Original network	Nickelodeon
Picture format	NTSC 4:3 (480i)
Original release	February 21, 2005 – July 19, 2008
Chronology
Followed by	
Avatar: The Last Airbender (comics)
The Legend of Korra (TV series)
External links
Official website
	This article contains Chinese text. Without proper rendering support, you may see question marks, boxes, or other symbols instead of Chinese characters.
Avatar: The Last Airbender (Avatar: The Legend of Aang in some regions) is an American animated television series that aired for three seasons (referred to as “books” in each episode’s title card) on Nickelodeon from 2005 to 2008. Avatar: The Last Airbender is set in an Asiatic-like world[2] in which some people are able to manipulate the classical elements by use of psychokinetic variants of Chinese martial arts, known as “bending”. The show combines the styles of anime and American cartoons, and relies on the imagery of various East Asian, Inuit, Southeast Asian, South Asian, and New World societies. Therefore, whether or not the series can be considered as an anime work is often discussed.[3]&lt;/p&gt;

&lt;p&gt;The series follows the adventures of protagonist twelve-year-old Aang and his friends, who must bring peace and unity to the world by ending the Fire Lord’s war against the other three nations.[4] The pilot episode first aired on February 21, 2005,[5] and the series concluded with a widely praised two-hour episode on July 19, 2008.[6] The show is obtainable from various sources, including DVD, the iTunes Store, the Zune Marketplace, the Xbox Live Marketplace, the PlayStation Store, Netflix, Amazon Video, and the Nicktoons Network.[7]&lt;/p&gt;

&lt;p&gt;Throughout its run, Avatar: The Last Airbender was universally acclaimed by audiences and critics alike.[8] Praises went to the art direction, humor, cultural references, characters, and themes. It was also commercially successful, garnering 5.6 million viewers on its best-rated showing and receiving high ratings in the Nicktoons lineup, even outside of its 6- to 11-year-old demographic.[4][9] The series has been nominated for and won awards from the Annie Awards, the Genesis Awards, a Primetime Emmy Award and a Peabody Award, among others. The first season’s success prompted Nickelodeon to order second[10] and third[11] seasons.&lt;/p&gt;

&lt;p&gt;In other media, the series has spawned a critically panned, but financially successful, live-action film, titled The Last Airbender, directed by M. Night Shyamalan; scaled action figures;[12] a trading card game;[13][14] three video games; stuffed animals distributed by Paramount Parks and two Lego sets. An art book was also released in mid-2010.[15][16] A sequel series, The Legend of Korra, aired from 2012 to 2014.[17]&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/07/06/Get-the-Subtitle/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/07/06/Get-the-Subtitle/</guid>
        
        <category>Python</category>
        
        <category>English</category>
        
        
      </item>
    
      <item>
        <title> Python Module RE</title>
        <description>&lt;h2 id=&quot;re&quot;&gt;RE&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; str1 = &#39; ShenZhen University &#39;

&amp;gt;&amp;gt;&amp;gt; str1.find(&#39;University&#39;)
10
&amp;gt;&amp;gt;&amp;gt; str1.find(&#39;11&#39;)
-1
&amp;gt;&amp;gt;&amp;gt; help(str1.find)
find(...)
S.find(sub [,start [,end]]) -&amp;gt; int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.  
   
   
&amp;gt;&amp;gt;&amp;gt; str1.startswith(&#39;Zhen&#39;)
False
&amp;gt;&amp;gt;&amp;gt; str1.startswith(&#39; Shen&#39;)
True
&amp;gt;&amp;gt;&amp;gt; import re
&amp;gt;&amp;gt;&amp;gt; pa = re.compile(r&#39;University&#39;)


&amp;gt;&amp;gt;&amp;gt; type(pa)
&amp;lt;type &#39;_sre.SRE_Pattern&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; dir(pa)
[&#39;__class__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__doc__&#39;, &#39;__format__&#39;, &#39;__getattribute__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;findall&#39;, &#39;finditer&#39;, &#39;flags&#39;, &#39;groupindex&#39;, &#39;groups&#39;, &#39;match&#39;, &#39;pattern&#39;, &#39;scanner&#39;, &#39;search&#39;, &#39;split&#39;, &#39;sub&#39;, &#39;subn&#39;]


&amp;gt;&amp;gt;&amp;gt; help(pa.match) 
match(...)
match(string[, pos[, endpos]]) --&amp;gt; match object or None.
Matches zero or more characters at the beginning of the string
(END)


&amp;gt;&amp;gt;&amp;gt; pa = re.compile(&#39;University&#39;)
&amp;gt;&amp;gt;&amp;gt; pa.match(str1)
&amp;gt;&amp;gt;&amp;gt; pa = re.compile(&#39; Shen&#39;)
&amp;gt;&amp;gt;&amp;gt; pa.match(str1)
&amp;lt;_sre.SRE_Match object at 0x107f13f38&amp;gt;


&amp;gt;&amp;gt;&amp;gt; ma = pa.match(str1)
&amp;gt;&amp;gt;&amp;gt; ma.group()
&#39; Shen&#39;
&amp;gt;&amp;gt;&amp;gt; dir(ma)
[&#39;__class__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__doc__&#39;, &#39;__format__&#39;, &#39;__getattribute__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;end&#39;, &#39;endpos&#39;, &#39;expand&#39;, &#39;group&#39;, &#39;groupdict&#39;, &#39;groups&#39;, &#39;lastgroup&#39;, &#39;lastindex&#39;, &#39;pos&#39;, &#39;re&#39;, &#39;regs&#39;, &#39;span&#39;, &#39;start&#39;, &#39;string&#39;]
	
&amp;gt;&amp;gt;&amp;gt; pa = re.compile(&#39; shen&#39;, re.I)
&amp;gt;&amp;gt;&amp;gt; ma = pa.match(str1)
&amp;gt;&amp;gt;&amp;gt; ma.group()
&#39; Shen&#39;


&amp;gt;&amp;gt;&amp;gt; ma = re.match(r&#39;hello&#39;, &#39;hello SZU, blah blah&#39;)
&amp;gt;&amp;gt;&amp;gt; ma.group()
&#39;hello&#39;
&amp;gt;&amp;gt;&amp;gt; ma.groups()
()
&amp;gt;&amp;gt;&amp;gt; ma = re.match(r&#39;(hello)&#39;, &#39;hello SZU, blah blah&#39;)
&amp;gt;&amp;gt;&amp;gt; ma.group()
&#39;hello&#39;
&amp;gt;&amp;gt;&amp;gt; ma.groups()
(&#39;hello&#39;,)		 

&amp;gt;&amp;gt;&amp;gt; help(re.match)	
match(pattern, string, flags=0)
    Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found.
(END)





# match a Python variable(start with a &#39;_&#39; or letter)
&amp;gt;&amp;gt;&amp;gt; ma = re.match(r&#39;[_a-zA-Z]+[_\w]*&#39;, &#39;_str1&#39;)
&amp;gt;&amp;gt;&amp;gt; ma
&amp;lt;_sre.SRE_Match object at 0x107e1eb28&amp;gt;
&amp;gt;&amp;gt;&amp;gt; ma.group()
&#39;_str1&#39;
&amp;gt;&amp;gt;&amp;gt; ma = re.match(r&#39;[_a-zA-Z]+[_\w]*&#39;, &#39;123_wer&#39;)
&amp;gt;&amp;gt;&amp;gt; ma
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;research-an-refindall&quot;&gt;re.search an re.findall&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# re.search and re.findall
&amp;gt;&amp;gt;&amp;gt; str2 = &#39;SZU University course = 999&#39;
&amp;gt;&amp;gt;&amp;gt; str2.find(&#39;999&#39;)
24
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; info = re.search(r&#39;\d+&#39;, str2)
&amp;gt;&amp;gt;&amp;gt; info.group()
&#39;999&#39;
&amp;gt;&amp;gt;&amp;gt; str3 = &#39;c++ = 100, java = 90, python = 78&#39;
&amp;gt;&amp;gt;&amp;gt; info = re.search(r&#39;\d+&#39;, str3)
&amp;gt;&amp;gt;&amp;gt; info.group()
&#39;100&#39;
&amp;gt;&amp;gt;&amp;gt; info = re.findall(r&#39;\d+&#39;, str3)
&amp;gt;&amp;gt;&amp;gt; type(info)
&amp;lt;type &#39;list&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; info
[&#39;100&#39;, &#39;90&#39;, &#39;78&#39;]
&amp;gt;&amp;gt;&amp;gt; sum([int(x) for x in info])
268
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;resub-and-resplit&quot;&gt;re.sub and re.split&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# re.sub and re.split
&amp;gt;&amp;gt;&amp;gt; def add1(match):
...     val = match.group()
...     num = int(val)+1
...     return str(num)
... 
&amp;gt;&amp;gt;&amp;gt; str3 = &#39;SZ University course = 999&#39;
&amp;gt;&amp;gt;&amp;gt; re.sub(r&#39;\d+&#39;, add1, str3)
&#39;SZ University course = 1000&#39;

&amp;gt;&amp;gt;&amp;gt; help(re.sub)
	sub(pattern, repl, string, count=0, flags=0)
    Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it&#39;s passed the match object and must return
    a replacement string to be used.
(END)

&amp;gt;&amp;gt;&amp;gt; str4 = &#39;progLanguage:C C++ Python Java Php&#39;
&amp;gt;&amp;gt;&amp;gt; re.split(r&#39;:|&#39;, str4)
[&#39;progLanguage&#39;, &#39;C C++ Python Java Php&#39;]
&amp;gt;&amp;gt;&amp;gt; re.split(r&#39; :| &#39;, str4)
[&#39;progLanguage:C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;Java&#39;, &#39;Php&#39;]

&amp;gt;&amp;gt;&amp;gt; help(re.split)
	split(pattern, string, maxsplit=0, flags=0)
    Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.
	(END)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/07/01/Python-Module-RE/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/07/01/Python-Module-RE/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Notes of Core Python Programming, 2nd edition</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#Python Objects&quot;&gt;Python Objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Numbers&quot;&gt;Numbers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Mapping and Set Types&quot;&gt;Mapping and Set Types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Functions and Functional Programming&quot;&gt;Functions and Functional Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;Python Objects&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;python-objects&quot;&gt;Python Objects&lt;/h2&gt;
&lt;hr /&gt;

&lt;h5 id=&quot;section&quot;&gt;工厂函数&lt;/h5&gt;
&lt;p&gt;就是指那些内建函数都是类对象，当调用他们时，实际上是创建了一个类实例。&lt;/p&gt;

&lt;p&gt;#####变量定义&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;显示声明&lt;/p&gt;

    &lt;p&gt;C: 变量声明必须位于代码块最开始，且在任何其他语句之前。&lt;br /&gt;
 C++、Java: 允许”随时随地”声明变量，不过仍必须在变量被使用前声明变量的名字和类型。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;隐式&lt;/p&gt;

    &lt;p&gt;Python: 变量在第一次被赋值时自动声明。Python 是一种解释性语言，在创建（也就是赋值时），解释器会根据语法和右侧的操作数来决定新对象的类型。在创建对象后，一个该对象的应用会被赋值给左侧的变量。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-1&quot;&gt;内存分配&lt;/h5&gt;

&lt;p&gt;为变量分配内存时，是在借用系统资源，在用完之后，应该释放借用的系统资源。Python 解释器承担了此任务。&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;引用计数&lt;/h5&gt;

&lt;p&gt;Python 使用引用计数技术来保持追踪内存中的对象。当对象被创建时，便创建一个引用计数（每个对象各有多少个引用），当对象不在需要时（也即引用计数变为0时），它被垃圾回收。&lt;/p&gt;

&lt;h5 id=&quot;dir-and-del&quot;&gt;dir() and del&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print dir.__doc__
dir([object]) -&amp;gt; list of strings

If called without an argument, return the names in the current scope.
Else, return an alphabetized list of names comprising (some of) the attributes
of the given object, and of attributes reachable from it.
If the object supplies a method named __dir__, it will be used; otherwise
the default dir() logic is used and returns:
  for a module object: the module&#39;s attributes.
  for a class object:  its attributes, and recursively the attributes
    of its bases.
  for any other object: its attributes, its class&#39;s attributes, and
    recursively the attributes of its class&#39;s base classes.

&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;]
&amp;gt;&amp;gt;&amp;gt; import sys 
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;sys&#39;]
&amp;gt;&amp;gt;&amp;gt; del sys
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;reduce-the-number-of-lookups&quot;&gt;Reduce the Number of Lookups&lt;/h5&gt;

&lt;p&gt;To actually get the integer type object, the interpreter has to look up the &lt;strong&gt;types&lt;/strong&gt; name first, and then within that module’s dictionary, find &lt;strong&gt;IntType&lt;/strong&gt;. By using from-import, you can take away one lookup:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from types import IntType
if type(num) == IntType ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p id=&quot;Numbers&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;numbers&quot;&gt;Numbers&lt;/h2&gt;

&lt;h5 id=&quot;type-categorized-by-the-update-model&quot;&gt;Type Categorized by the Update Model&lt;/h5&gt;

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Update Model Category&lt;/th&gt;
&lt;th&gt;Python Types That Fit Category&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mutable&lt;/td&gt;
&lt;td&gt;List, dictionaries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immutable&lt;/td&gt;
&lt;td&gt;Numbers, strings, tuples&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Rather than referring to the original objects, new objects with the new values were allocated and (re)assigned to the original varibale names, and the old objects were garbage-collected. One can confirm this by using the &lt;strong&gt;__id()__&lt;/strong&gt; &lt;strong&gt;BIF&lt;/strong&gt;(build-in function) to compare object identities before and after such assignments.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;foo&#39;, &#39;types&#39;, &#39;x&#39;]
&amp;gt;&amp;gt;&amp;gt; x
1
&amp;gt;&amp;gt;&amp;gt; id(x)
140457926481800
&amp;gt;&amp;gt;&amp;gt; x += 1
&amp;gt;&amp;gt;&amp;gt; id(x)
140457926481776

# a and b referring the same ...
&amp;gt;&amp;gt;&amp;gt; a = 10
&amp;gt;&amp;gt;&amp;gt; b = 10
&amp;gt;&amp;gt;&amp;gt; a is b
True
&amp;gt;&amp;gt;&amp;gt; id(a), id(b)
(140309388376016, 140309388376016)

&amp;gt;&amp;gt;&amp;gt; e = 10.0
&amp;gt;&amp;gt;&amp;gt; f = 10.0
&amp;gt;&amp;gt;&amp;gt; e is f
False
&amp;gt;&amp;gt;&amp;gt; id(e), id(f)
(140309388384736, 140309388384760)

&amp;gt;&amp;gt;&amp;gt; s = 0.0
&amp;gt;&amp;gt;&amp;gt; for i in range(10): 
...     s += 0.1
... 
&amp;gt;&amp;gt;&amp;gt; s
0.9999999999999999	
&amp;gt;&amp;gt;&amp;gt; print s
1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt; how for each change, the ID for the list remained the same.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list
[&#39;this&#39;, 5, &#39;list&#39;]
&amp;gt;&amp;gt;&amp;gt; id(list)
4303214496
&amp;gt;&amp;gt;&amp;gt; list[0] = &#39;list&#39;
&amp;gt;&amp;gt;&amp;gt; list
[&#39;list&#39;, 5, &#39;list&#39;]
&amp;gt;&amp;gt;&amp;gt; id(list)
4303214496
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Factory functions&lt;/strong&gt;, just means that those objects are now classes, and when you “call” them, you are just creating an instance of that class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compare&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;int()：&lt;/strong&gt; chops off the decimal point and everything after.  直接截去小数部分（返回值为整型）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;floor()：&lt;/strong&gt; rounds you to the next smaller integer, i.e., the next integer moving in a negative direction(toward the left on the number line).  得到最接近原数但小于原数的整型。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;round():&lt;/strong&gt; (round zero digits) rounds you to the nearest integer period.  得到最接近原数的整型。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; print hex.__doc__
  hex(number) -&amp;gt; string
	
  Return the hexadecimal representation of an integer or long integer.
  &amp;gt;&amp;gt;&amp;gt; print oct.__doc__
  oct(number) -&amp;gt; string
	
  Return the octal representation of an integer or long integer.
  &amp;gt;&amp;gt;&amp;gt; 
  &amp;gt;&amp;gt;&amp;gt; hex(255)
  &#39;0xff&#39;
  &amp;gt;&amp;gt;&amp;gt; oct(255)
  &#39;0377&#39;

  &amp;gt;&amp;gt;&amp;gt; print chr.__doc__
  chr(i) -&amp;gt; character
	
  Return a string of one character with ordinal i; 0 &amp;lt;= i &amp;lt; 256.
  &amp;gt;&amp;gt;&amp;gt; print ord.__doc__
  ord(c) -&amp;gt; integer
	
  Return the integer ordinal of a one-character string.
  &amp;gt;&amp;gt;&amp;gt; chr(99)
  &#39;c&#39;
  &amp;gt;&amp;gt;&amp;gt; ord(&#39;d&#39;)
  100
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sequences-strings-lists-and-tuples&quot;&gt;Sequences: strings, Lists, and Tuples&lt;/h2&gt;

&lt;p&gt;Sequence type all share the same access model: ordered set with sequentially indexed offsets to get to each element. Multiple elements may be selected by using the slice operators.&lt;/p&gt;

&lt;h5 id=&quot;repetition&quot;&gt;Repetition&lt;/h5&gt;

&lt;p&gt;The repetition operator is useful when consecutive copies of sequence elements are desired. The syntax for using the repetition operator is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#sequence * copies_int
&amp;gt;&amp;gt;&amp;gt; &#39;*&#39; * 40
&#39;****************************************&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;what!&#39; * 4
&#39;what!what!what!what!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The number of copies, copies_int, must be an integer. As with the concatenation operator, the object returned is newly allocated to hold the contents of the multiply replicated objects.&lt;/p&gt;

&lt;h5 id=&quot;format-operator-&quot;&gt;Format Operator (%)&lt;/h5&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/CorePython-formatOperator.png&quot; width=&quot;280&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;special-features-of-lists&quot;&gt;Special Features of Lists&lt;/h5&gt;

&lt;p&gt;** Cerating Other Data Structures Using Lists **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stack:&lt;/strong&gt; A last-in-first-out &lt;strong&gt;(LILO)&lt;/strong&gt; data structure.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Queue:&lt;/strong&gt; A first-in-first-out &lt;strong&gt;(FIFO)&lt;/strong&gt; data structure, which works like a bank teller line. The first person in line is the first one served. New elements join by being “enqueued” at the end of the line, and elements are removed from the front by being “dequeued.”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tuples:&lt;/strong&gt; Tuples are another container type extremely similar in nature to lists. The only visible difference between tuples and lists is that tuples use parentheses and lists use square brackets. and Tuples are immutable, Because of this, tuples can do something that lists cannot do…be a dictionary key. Tuples are also the default when dealing with a group of objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sidle-Element Tuples: to place a trailing comma (,) after the first element to indicate that this is a tuple and not a grouping.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; type( (&#39;xyz&#39;) )
&amp;lt;type &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type( (&#39;xyz&#39;,) )
&amp;lt;type &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;dictionary-keys&quot;&gt;Dictionary Keys&lt;/h5&gt;

&lt;p&gt;Immutable objects have values that cannot be changed. That means that they will always hash to the same value. This is the requirement for an object being valid dictionary key. As we will find out in the next chapter, keys must be washable objects, and tuples meet that criteria. Lists are not eligible.&lt;/p&gt;

&lt;h5 id=&quot;lists--tuples&quot;&gt;Lists &amp;amp; Tuples&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;list()&lt;/strong&gt; and &lt;strong&gt;tuple()&lt;/strong&gt; are functions that allow you to create a tuple from a list and vice versa( vice versa means ‘反之亦然’). When you have a tuple and want a list because you need to update its objects, the &lt;strong&gt;list()&lt;/strong&gt; function suddenly becomes your best buddy. When you have a list and want to pass it into a function, perhaps &lt;strong&gt;API&lt;/strong&gt;, and you do not want anyone to mess with the data, the &lt;strong&gt;tuple()&lt;/strong&gt; function comes in quite useful.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; tuple([1, 2, 3])
(1, 2, 3)
&amp;gt;&amp;gt;&amp;gt; list((4, 5, 6))
[4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = tuple(range(1000))
b = list(range(1000))

a.__sizeof__() # 8024
b.__sizeof__() # 9088
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Due to the smaller size of a tuple operation with it a bit faster but not that much to mention about until you have a huge amount of elements.
Permitted operations&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b    = [1,2]   
b[0] = 3       # [3, 2]

a    = (1,2)
a[0] = 3       # Error
sxdcfm, that also mean that you can&#39;t delete element or sort tuple. At the same time you could add new element to both list and tuple with the only difference that you will change id of the tuple by adding element

a     = (1,2)
b     = [1,2]  

id(a)          # 140230916716520
id(b)          # 748527696

a   += (3,)    # (1, 2, 3)
b   += [3]     # [1, 2, 3]

id(a)          # 140230916878160
id(b)          # 748527696
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;br /&gt;
You can’t use list as a dictionary identifier&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a    = (1,2)
b    = [1,2] 

c = {a: 1}     # OK
c = {b: 1}     # Error
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;copying-python-objects-and-shallow-and-deep-copies&quot;&gt;Copying python objects and Shallow and Deep Copies&lt;/h5&gt;

&lt;p&gt;A shallow copy is where only references are copied…no new objects are made! If you also want copies of the objects(including recursively if you have container objects in containers), you will need to learn about deep copies.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.python-course.eu/deep_copy.php&quot;&gt;Shallow and Deep Copies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The shallow and deep copy operations that we just described are found in the &lt;strong&gt;copy&lt;/strong&gt; module. There are really only two functions to use from this module: &lt;strong&gt;copy()&lt;/strong&gt; creates shallow copy, and &lt;strong&gt;deepcopy()&lt;/strong&gt; creates a deep copy.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/2/library/copy.html&quot;&gt;htts://docs.python.org/2/library/copy.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;append&quot;&gt;Append&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import string
&amp;gt;&amp;gt;&amp;gt; string.letters
&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;
&amp;gt;&amp;gt;&amp;gt; string.digits
&#39;0123456789&#39;

&amp;gt;&amp;gt;&amp;gt; import keyword
&amp;gt;&amp;gt;&amp;gt; keyword.kwlist
[&#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;exec&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;print&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p id=&quot;Mapping and Set Types&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;mapping-and-set-types&quot;&gt;Mapping and Set Types&lt;/h2&gt;

&lt;p&gt;Dictionary may be created using a very convenient built-in-method for creating a “default” dictionary whose elements all have the same value(default to &lt;strong&gt;None&lt;/strong&gt; if not given), &lt;strong&gt;fromkeys()&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ddict = {&#39;x&#39;: &#39;hello&#39;, &#39;y&#39;: &#39;dict&#39;}
&amp;gt;&amp;gt;&amp;gt; fdict = {}.fromkeys((&#39;m&#39;, &#39;n&#39;), 8)
&amp;gt;&amp;gt;&amp;gt; edict = {}.fromkeys((&#39;foo&#39;, &#39;bar&#39;))
&amp;gt;&amp;gt;&amp;gt; print ddict, fdict, edict
{&#39;y&#39;: &#39;dict&#39;, &#39;x&#39;: &#39;hello&#39;} {&#39;m&#39;: 8, &#39;n&#39;: 8} {&#39;foo&#39;: None, &#39;bar&#39;: None}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Core TIps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because &lt;strong&gt;dict()&lt;/strong&gt; is now a type and factory function, overriding it may cause you headaches and potential bugs. The interpreter will allow such overriding-hey, it thinks you seem smart and look like you know what you are doing! So be careful. Do &lt;strong&gt;NOT&lt;/strong&gt; use variables named after built-in types like: &lt;strong&gt;dict, list, file, bool, str, input, Or len!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How dictionaries are compared&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/CorePython-dictionaryCompare.png&quot; width=&quot;340&quot; /&gt;&lt;/p&gt;

&lt;p id=&quot;Functions and Functional Programming&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;functions-and-functional-programming&quot;&gt;Functions and Functional Programming&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Decorator&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819879946007bbf6ad052463ab18034f0254bf355000&quot;&gt;http://www.liaoxuefeng.com&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://thecodeship.com/patterns/guide-to-python-function-decorators/&quot;&gt;Guide to Python Function Decorators&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;non-keyword-variable-arguments-tuple&quot;&gt;Non-keyword Variable Arguments (&lt;strong&gt;Tuple&lt;/strong&gt;)&lt;/h5&gt;

&lt;p&gt;A **TypeError exception is generated whenever an incorrect number of arguments is given in the function invocation. By adding a variable argument list variable at the end, we can handle the situation when more than enough arguments are passed to the function because all the extra(non-keyword) ones will be added to the variable argument tuple.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def tupleVariable(arg1, arg2=&#39;defaultB&#39;, *theRest):
...     &#39;display regular args and non-keyword variable args&#39;
...     print &#39;format arg 1: &#39;, arg1
...     print &#39;format arg 2: &#39;, arg2
...     for eachXtrArg in theRest:
...             print &#39;another arg: &#39;, eachXtrArg
... 
&amp;gt;&amp;gt;&amp;gt; tupleVariable(&#39;abc&#39;)
format arg 1:  abc
format arg 2:  defaultB
&amp;gt;&amp;gt;&amp;gt; tupleVariable(23, 4.56)
format arg 1:  23
format arg 2:  4.56
&amp;gt;&amp;gt;&amp;gt; tupleVariable(&#39;abc&#39;, 123, &#39;xyz&#39;, 456.789)
format arg 1:  abc
format arg 2:  123
another arg:  xyz
another arg:  456.789
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;keyword-variable-arguments-dictionary&quot;&gt;Keyword Variable Arguments (&lt;strong&gt;Dictionary&lt;/strong&gt;)&lt;/h5&gt;

&lt;p&gt;In the case where we have a variable number or extra set of keyword arguments, these are placed into a dictionary where the “Keyword” argument variable names are the keys, and the arguments are their corresponding values. A double asterisk (**) is used.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def dictVarArgs(arg1, arg2=&#39;defaultB&#39;, **theRest):
...     &#39;display 2 regular args and keyword variable args&#39;
...     print &#39;format arg1: &#39;, arg1
...     print &#39;format arg2: &#39;, arg2
...     for eachXtrArg in theRest.keys():
...             print &#39;Xtr arg %s: %s&#39; %  (eachXtrArg, str(theRest[eachXtrArg]))
... 
&amp;gt;&amp;gt;&amp;gt; dictVarArgs(1220, 740.3, c=&#39;grail&#39;)
format arg1:  1220
format arg2:  740.3
Xtr arg c: grail
&amp;gt;&amp;gt;&amp;gt; dictVarArgs(arg2=&#39;tales&#39;, c=&#39;grail&#39;, d=123, arg1=&#39;mystery&#39;)
format arg1:  mystery
format arg2:  tales
Xtr arg c: grail
Xtr arg d: 123
&amp;gt;&amp;gt;&amp;gt; dictVarArgs(&#39;one&#39;, d=10, c=&#39;grail&#39;, e=&#39;zoo&#39;, men=(123, &#39;fuck&#39;))
format arg1:  one
format arg2:  defaultB
Xtr arg c: grail
Xtr arg men: (123, &#39;fuck&#39;)
Xtr arg e: zoo
Xtr arg d: 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p id=&quot;Modules&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;p&gt;####Search Path&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.path
[&#39;&#39;, &#39;/Library/Python/2.7/site-packages/virtualenv-15.0.2-py2.7.egg&#39;, &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip&#39;, &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7&#39;]
&amp;gt;&amp;gt;&amp;gt; type(sys.path)
&amp;lt;type &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bearing in mind that is just a list, we can definitely take Liberty with it and modify it at our leisure. If you know of a module you want to import, yet its directory is not in the search path, by all means use the list’s &lt;strong&gt;append()&lt;/strong&gt; method to add it to the path, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; os.getcwd()
&#39;/Users/xing&#39;
&amp;gt;&amp;gt;&amp;gt; sys.path.append(os.getcwd())
&amp;gt;&amp;gt;&amp;gt; sys.path
[&#39;&#39;, &#39;/Library/Python/2.7/site-packages/virtualenv-15.0.2-py2.7.egg&#39;, &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip&#39;, &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7&#39;, &#39;/Users/xing&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####Import Modules&lt;/p&gt;

&lt;p&gt;It is recommended that all imports happen at the top of Python modules. Furthermore, imports should follow this ordering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python Standard Library modules&lt;/li&gt;
  &lt;li&gt;Python third party modules&lt;/li&gt;
  &lt;li&gt;Application-specific modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Separate these groups with an empty line between the imports of these types of modules. This helps ensure that modules are imported in a consistent manner and helps minimize the number of &lt;strong&gt;import&lt;/strong&gt; statements required in each of the modules.&lt;/p&gt;

&lt;h4 id=&quot;instance-attributes&quot;&gt;Instance Attributes&lt;/h4&gt;

&lt;p&gt;Being able to create an instance attribute “on-the-fly” is one of the great features of Python classes, initially (but gently) shocking those coming from C++ or Java in which all attributes must be explicitly defined/ declared first.&lt;/p&gt;

&lt;p&gt;Python is not only dynamically typed but also allows for such dynamic creation of object attributes during run-time. It is a feature that once used may be difficult to live without. Of course, we should mention to the reader that one much be cautious when creating such attributes.&lt;/p&gt;

&lt;p&gt;One pitfall is when such attributes are created in conditional clauses: if you attempt to access such an attribute later on in your code, that attribute may not exist if the flow had not entered that conditional suite. The moral of the story is that Python gives you a new feature you were not used to before, but if you use it, you need to be more careful, too.&lt;/p&gt;

&lt;p&gt;####Functions versus methods&lt;/p&gt;

&lt;p&gt;Methods are basically functions but tied to a specific class object type. They are defined as part of a class and are executed as part of an instance of that class.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/07/01/Notes-of-CorePython/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/07/01/Notes-of-CorePython/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>2016-06-30 and Double Pinyin</title>
        <description>&lt;p&gt;” 也许以后还会应付其他考试，但今天这场该是最后一场算学分的考试了，感觉像是快要毕业了，虽然还早，也许，也并不早…”&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2016-06-30&lt;/h2&gt;

&lt;p&gt;翻查了下早先的Schedule，共有四次，每次都以日期命名，初次为2016-03-01-Schedule，间隔差不多均是一月，今次稍加总结。主要有以下几项内容：&lt;/p&gt;

&lt;h4 id=&quot;english&quot;&gt;1. English&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;听说：
    &lt;ul&gt;
      &lt;li&gt;IPAD百度云赖世雄音标: 仅完成元音部分&lt;/li&gt;
      &lt;li&gt;IPAD百度云盘: 文件夹“听VOA还不如听这些”&lt;/li&gt;
      &lt;li&gt;English Pod: Lesson 90&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;写作：
    &lt;ul&gt;
      &lt;li&gt;NCE2: Finished.&lt;/li&gt;
      &lt;li&gt;NCE3: 教材，自学导读，同步练习册，视频讲解&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;阅读：
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Harry Potter&lt;/strong&gt; (1-6 Finished)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;The devotion of suspect X&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;associate-constructor&quot;&gt;2. Associate Constructor:&lt;/h4&gt;
&lt;p&gt;二建已考完，耗了一定精力，九月份查成绩，也许会跪。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Online video&lt;/li&gt;
  &lt;li&gt;Textbook&lt;/li&gt;
  &lt;li&gt;市政：考点串通，案例分析题答题点背诵。&lt;/li&gt;
  &lt;li&gt;管理：环球网校录播课&lt;/li&gt;
  &lt;li&gt;法规：IPAD 百度云陈印法规视频&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cpa&quot;&gt;3. CPA&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;preview_course: Finished&lt;/li&gt;
  &lt;li&gt;basic lesson for now&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cs&quot;&gt;4. CS&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;猎豹CPP-lessons&lt;/li&gt;
  &lt;li&gt;Algorithms 4th edition-robert sedgewick&lt;/li&gt;
  &lt;li&gt;Computer Network: A top-down approach.&lt;/li&gt;
  &lt;li&gt;Python
    &lt;ul&gt;
      &lt;li&gt;Learn-Python-the-hard-way a&lt;/li&gt;
      &lt;li&gt;python project “Instant Markup”&lt;/li&gt;
      &lt;li&gt;Web Scraping with Python&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flask Web Development developing web applications with python&lt;/li&gt;
  &lt;li&gt;html, CSS, JavaScript tutorial&lt;/li&gt;
  &lt;li&gt;Jekyll:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ethanpen.github.io/planets-of-the-universe/&quot;&gt;planets-of-universer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ethanpen.github.io/&quot;&gt;Ethan.penx Blog&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;double-pinyin&quot;&gt;Double Pinyin&lt;/h2&gt;

&lt;h4 id=&quot;section-1&quot;&gt;双拼&lt;/h4&gt;
&lt;p&gt;首先，双拼输入法写下这篇博文来介绍下什么是双拼&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;双拼是汉语拼音输入法的一种编码方案，使用双拼输入汉字时只需一个代表声母的字，一个代表韵母的字，即可打出任意一个中文单字。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-2&quot;&gt;编码原理&lt;/h4&gt;

&lt;p&gt;双拼编码是通过一定的规则把汉字的每种拼音编码为两个字母，根据编码规则汉字的拼音分为下列几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;双拼方案：单声母键位不变，主要是韵母键位的设计方案，即把三个双声母 zh, ch, sh 和35个韵母安排到键盘的26个字母键位上的设计方案。&lt;/li&gt;
  &lt;li&gt;零声母方案：指的是全拼中无声母的音节在双拼中的处理方案，即全拼中有几个音节没有声母，双拼中需要把这个零声母实质化，于是就有了零声母方案。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;话不多说，上图
&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/2016.06.30andDoublePinyin-cheatsheet.png&quot; width=&quot;420&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;众说双拼&lt;/h4&gt;

&lt;p&gt;当然，此刻的我对于双拼还没有太深的理解，因为我个人用上双拼也仅是两三日。原因很简单，勇于尝试。。。想知道双拼到底有何感受？也很简单，像我一样，装好输入法直接开打就是了！
对于双拼和其他输入法的优劣比较你只需Google之便是了，而我个人感觉，也许双拼的好并不在于少敲击那么几下键盘，而是在于那种固定敲击两下的节奏感吧。。。&lt;/p&gt;

&lt;p&gt;贴一个知乎的问答: &lt;a href=&quot;https://www.zhihu.com/question/20555958&quot;&gt;双拼输入法对比全拼输入法效率更高吗&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;方案选择&lt;/h4&gt;
&lt;p&gt;我们已经知道，双拼输入法将复合声母和韵母简化为一个字母，但究竟该用哪个字母对应这些复合的声母韵母，并没有一个统一的规定。因此，坊间流传着各种各样的双拼方案，下面的列表就是其中具有代表性的一些（键位对应可以在网上搜到）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;微软双拼（以及类似的搜狗双拼）&lt;/li&gt;
  &lt;li&gt;自然码双拼&lt;/li&gt;
  &lt;li&gt;小鹤双拼&lt;/li&gt;
  &lt;li&gt;紫光双拼&lt;/li&gt;
  &lt;li&gt;拼音加加（双拼）&lt;/li&gt;
  &lt;li&gt;智能 ABC （双拼）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各双拼方案在输入效率上会有细微的差异，但基本可以忽略不计。&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/06/30/2016.06.30-and-DoublePinyin/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/06/30/2016.06.30-and-DoublePinyin/</guid>
        
        <category>Life</category>
        
        <category>SundrySkills</category>
        
        
      </item>
    
      <item>
        <title>Python Challenge (7 - 10)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.pythonchallenge.com/&quot;&gt;PythonChallenge&lt;/a&gt;&lt;br /&gt;
To read the pre-Level of PythonChallenge at this site: &lt;a href=&quot;http://jnstar.iteye.com/admin/blogs/2214796&quot;&gt;Ethan.Penx Blog in ITeye&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#Level 7&quot;&gt;Level 7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Level 8&quot;&gt;Level 8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Level 9&quot;&gt;Level 9&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Level 10&quot;&gt;Level 10&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p id=&quot;Level 7&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-7&quot;&gt;Level 7&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Riddle Page L7:&lt;/strong&gt; &lt;a href=&quot;http://www.pythonchallenge.com/pc/def/oxygen.html&quot;&gt;http://www.pythonchallenge.com/pc/def/oxygen.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The title of the page is “smarty”, and there’s a picture  with a strip of greyscale squares across the middle which is at the top of the page. At the sight of the clue “smarty”, what occurs to me is a &lt;strong&gt;Python Module&lt;/strong&gt; named &lt;strong&gt;Smartypants&lt;/strong&gt;, but sadly, there’s nothing I can get by &lt;strong&gt;smartypants.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mabye the clue is in those greyscale squares, with the greyscale level (range from 0-255) encoding something in it, whatever, try it first.&lt;/p&gt;

&lt;p&gt;Downloaded the picture(named it ‘&lt;strong&gt;oxygen.png&lt;/strong&gt;’).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import Image
&amp;gt;&amp;gt;&amp;gt; im = Image.open(&quot;/Users/xing/Desktop/oxygen.png&quot;)
&amp;gt;&amp;gt;&amp;gt; width, height = im.size
&amp;gt;&amp;gt;&amp;gt; im.getpixel((0, h//2))
(115, 115, 115, 255)
&amp;gt;&amp;gt;&amp;gt; print chr(115), chr(255)
s ?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well, that make sense. Let’s guess that each block is 4 pixel wider:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; smarty = [chr(im.getpixel((i, h//2))[0]) for i in range(0, width, 4)]
&amp;gt;&amp;gt;&amp;gt; &#39;&#39;.join(smarty)
&#39;ssmaarrtt gguuyy,  yyoou  mmaadee  iit..  tthee  nnexxtt  leevveel  iiss [[11005,,  11100,,  11166,, 110011,  11003,,  11144,,  10055,, 111166,  11221]]rbecbc&#39;
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Obviously, I choose the wrong pixel width, try it a few of times.&lt;/p&gt;

&lt;p&gt;Turns out, the colour changes every 7 pixels.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print &#39;&#39;.join([chr(im.getpixel((i, h//2))[0]) for i in range(0, width, 7)])
smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]pe_
&amp;gt;&amp;gt;&amp;gt; print &#39;&#39;.join(map(chr, [105, 110, 116, 101, 103, 114, 105, 116, 121]))
integrity
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, change the &lt;strong&gt;url&lt;/strong&gt; (&lt;strong&gt;oxygen –&amp;gt; integrity&lt;/strong&gt;) to getting Level 8:
&lt;strong&gt;Riddle Page L8:&lt;/strong&gt; &lt;a href=&quot;http://www.pythonchallenge.com/pc/def/integrity.html&quot;&gt;http://www.pythonchallenge.com/pc/def/integrity.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-related&quot;&gt;The Related&lt;/h3&gt;

&lt;p&gt;There’s something to help understand all the Image stuff as following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://pillow.readthedocs.io/en/3.2.x/reference/Image.html&quot;&gt;PIL - Image Module&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3823752/display-image-as-grayscale-using-matplotlib&quot;&gt;Display image as grayscale using matplotlib&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11064786/get-pixels-rgb-using-pil&quot;&gt;Get pixel’s RGB using PIL&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;functions&quot;&gt;functions:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Image.getpixel(xy):&lt;/strong&gt;&lt;br /&gt;
&amp;gt;	Returns the pixel value at a given position.&lt;br /&gt;
Parameters:	xy – The coordinate, given as (x, y).&lt;br /&gt;
Returns:	The pixel value. If the image is a multi-layer image, this method returns a tuple.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;map(function, sequence[, sequence, …]) -&amp;gt; list&lt;/strong&gt; &lt;br /&gt;
&amp;gt; 	Return a list of the results of applying the function to the items of
  the argument sequence(s).  If more than one sequence is given, the
  function is called with an argument list consisting of the corresponding
  item of each sequence, substituting None for missing values when not all
  sequences have the same length.  If the function is None, return a list of the items of the sequence (or a list of tuples if more than one sequence).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p id=&quot;Level 8&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-8&quot;&gt;Level 8&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Riddle Page L8:&lt;/strong&gt; &lt;a href=&quot;http://www.pythonchallenge.com/pc/def/integrity.html&quot;&gt;http://www.pythonchallenge.com/pc/def/integrity.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, there’s a picture with a bee flying up the flower, and the clues “Where is the missing link?” at the bottom of the page, clicked the picture takes us to a &lt;strong&gt;password-protected&lt;/strong&gt; page for area “inflate”. And the title of this page is “working hard?”.  Seriously? working hard? I’m totally confused…&lt;/p&gt;

&lt;p&gt;Let’s do it the old ways, check the source code of this page, it’s showed me a series of messy strings, Unfortunately, I can’t figure out what types of coding it used, neither encoding it.&lt;/p&gt;

&lt;p&gt;Fine, google the messy strings, turns out, it’s brz2 compressed file format.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; un = &quot;BZh91AY&amp;amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&amp;lt;]\xc9\x14\xe1BA\x06\xbe\x084&quot;
&amp;gt;&amp;gt;&amp;gt; pw = &#39;BZh91AY&amp;amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&amp;lt;]\xc9\x14\xe1BBP\x91\xf08&#39;

&amp;gt;&amp;gt;&amp;gt; import bz2
&amp;gt;&amp;gt;&amp;gt; bz2.decompress(un)
&#39;huge&#39;
&amp;gt;&amp;gt;&amp;gt; bz2.decompress(pw)
&#39;file&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, entered the username&amp;amp;password come to the Level 9: &lt;a href=&quot;http://www.pythonchallenge.com/pc/return/good.html&quot;&gt;http://www.pythonchallenge.com/pc/return/good.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTW, here’s the hint comes from official solutions:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You see a bee in the picture. She sounds busy too. What could that mean?
bee? busy. busy? busy too ? bz2?
The hint in the password box says “inflate” so you consider to try to decompress the strings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;the-related-1&quot;&gt;THe Related&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.pythonchallenge.com/index.php?title=Level8:Main_Page&quot;&gt;Level8:Main Page
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;functions-1&quot;&gt;functions:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;bz2.compress(data[, compresslevel])&lt;/strong&gt;&lt;br /&gt;
Compress data in one shot. If you want to compress data sequentially, use an instance of BZ2Compressor instead. The compresslevel parameter, if given, must be a number between 1 and 9; the default is 9.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;bz2.decompress(data)&lt;/strong&gt;&lt;br /&gt;
Decompress data in one shot. If you want to decompress data sequentially, use an instance of BZ2Decompressor instead.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p id=&quot;Level 9&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-9&quot;&gt;Level 9&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Riddle Page Level 9: (Uname: huge, Pwd: file)&lt;/strong&gt; &lt;a href=&quot;http://www.pythonchallenge.com/pc/return/good.html&quot;&gt;http://www.pythonchallenge.com/pc/return/good.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The title of this page is “connect the dots”, and there are a long lists of numbers for “first”&amp;amp;”second” in the source page. Maybe the numbers are the coordinates of dots which join another picture? Just do it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MBP-Ethan:TextWrangler xing$ vim pythonchallenge9.py
&#39;&#39;&#39;
copy &amp;amp; paste the &quot;first&quot; and &quot;second&quot;
&#39;&#39;&#39;
MBP-Ethan:TextWrangler xing$ python pythonchallenge9.py 

# enter python shell
&amp;gt;&amp;gt;&amp;gt; from pythonchallenge9 import *
&amp;gt;&amp;gt;&amp;gt; len(list1), min(list1), max(list1)
(442, 77, 403)
&amp;gt;&amp;gt;&amp;gt; len(list2), min(list2), max(list2)
(112, 77, 220)

&amp;gt;&amp;gt;&amp;gt; import Image
&amp;gt;&amp;gt;&amp;gt; help(Image.new)
new(mode, size, color=0)
Create a new image
&amp;gt;&amp;gt;&amp;gt; im = Image.new(&#39;1&#39;, (600, 600), &quot;white&quot;)
&amp;gt;&amp;gt;&amp;gt; import ImageDraw
&amp;gt;&amp;gt;&amp;gt; line1 = zip(list1[0::2], list1[1::2])
&amp;gt;&amp;gt;&amp;gt; line2 = zip(list2[0::2], list2[1::2])
&amp;gt;&amp;gt;&amp;gt; draw = ImageDraw.Draw(im)
&amp;gt;&amp;gt;&amp;gt; draw.line(line1)
&amp;gt;&amp;gt;&amp;gt; draw.line(line2)
&amp;gt;&amp;gt;&amp;gt; im.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A bull showed on the screen.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/PythonChallenge-bull.png&quot; width=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, same old, changing the url to get to Level10:
&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/bull.html&quot;&gt;http://www.pythonchallenge.com/pc/return/bull.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-related-2&quot;&gt;The Related&lt;/h4&gt;

&lt;h5 id=&quot;functions-2&quot;&gt;functions&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Image.new(mode, size, color) ⇒ image&lt;/strong&gt;&lt;br /&gt;
Creates a new image with the given mode and size. Size
is given as a (width, height)-tuple, in pixels. The
color is given as a single value for single-band 
images, and a tuple for multi-band images (with one 
value for each band). In 1.1.4 and later, you can also 
use color names (see the ImageColor module 
documentation for details) If the color argument is 
omitted, the image is filled with zero (this usually 
corresponds to black). If the color is None, the image 
is not initialised. This can be useful if you’re going 
to paste or draw things in the image.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  from PIL import Image
  im = Image.new(&quot;RGB&quot;, (512, 512), &quot;white&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Draw a Grey Cross Over an Image&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import Image, ImageDraw

  im = Image.open(&quot;lena.pgm&quot;)

  draw = ImageDraw.Draw(im)
  draw.line((0, 0) + im.size, fill=128)
  draw.line((0, im.size[1], im.size[0], 0), fill=128)
  del draw

  # write to stdout
  im.save(sys.stdout, &quot;PNG&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p id=&quot;Level 10&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-10&quot;&gt;Level 10&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Riddle page Level 10&lt;/strong&gt;: &lt;a href=&quot;http://www.pythonchallenge.com/pc/return/bull.html&quot;&gt;http://www.pythonchallenge.com/pc/return/bull.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s a picture of a bull and the clue is “len(a[30]) = ?”. Display the source page, and  clicking the href=”sequence.txt” get to the another page which is reveals “a = [1, 11, 21, 1211, 111221, “.  Obviously, we’re asked to solve the sequence puzzle.&lt;/p&gt;

&lt;p&gt;Type the numbers into the &lt;strong&gt;&lt;a href=&quot;https://oeis.org/search?q=1%2C11%2C21%2C1211%2C111221&amp;amp;language=english&amp;amp;go=Search&quot;&gt;Online Encyclopedia of Integer Sequences,&lt;/a&gt; (OEIS)&lt;/strong&gt;. Turns out, this one is &lt;strong&gt;A005150, “Look and say sequence.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s Python code in the OEIS for computing the values of the sequence, but it’s simpler to follow the cross-reference for the length of the n-th term to find the sequence &lt;strong&gt;&lt;a href=&quot;https://oeis.org/A005341&quot;&gt;A005341&lt;/a&gt;&lt;/strong&gt;, it gives the length of the 31st term as 5808.&lt;/p&gt;

&lt;p&gt;So, here’s the url of Level 11:
&lt;a href=&quot;http://www.pythonchallenge.com/pc/return/5808.html&quot;&gt;http://www.pythonchallenge.com/pc/return/5808.html&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 25 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/06/25/Python-Challenge/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/06/25/Python-Challenge/</guid>
        
        <category>PythonChallenge</category>
        
        
      </item>
    
      <item>
        <title>Mixed Content</title>
        <description>&lt;p&gt;“ 如果一整天下来你都不是很开心，那么今天一定不是个好日子！”&lt;/p&gt;

&lt;h2 id=&quot;mixed-content-1-mixed-content&quot;&gt;Mixed Content 1: mixed-content&lt;/h2&gt;

&lt;p&gt;之前的在本地通过 jekyll serve 测试好的博客项目上传到Github之后，碰到了问题: &lt;strong&gt;Mixed Content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content&quot;&gt;So, what’s the Mixed Content?&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A: When a user visits a page served over HTTPS, their connection with the web  server is encrypted with TLS and is therefore safeguarded from sniffers and  man-in-the-middle attacks. If the HTTPS page includes content retrieved through regular, cleartext HTTP, then the connection is only partially      encrypted; the unencrypted content is accessible to sniffers and can be     modified by man-in-the-middle attackers, so the connection is not           safeguarded. When a web page exhibits this behavior, it is called a mixed   content page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的，这个Mixed Content分为两种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mixed passive/display content&lt;/li&gt;
  &lt;li&gt;Mixed active content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;solving过程中碰到的Failed to load resource的页面&lt;a href=&quot;http://stackoverflow.com/questions/23688565/failed-to-load-resource-neterr-insecure-response&quot;&gt;ERR_INSECURE_RESPONSE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因为index.html页面需要获取到某种字体的方式为http，而Github pages又是https服务的，所以chrome锁定了获取字体的页面请求，试过将http指定为https方式不行，试过New tab来获取字体所在网站证书貌似还是不行，虽然可以在获取index.html页面地址栏点开小卫士图标来确认加载未经验证的内容（也就是要get的css以及font咯），但不能每次都这样访问吧，且其他访问者都不会注意到这个内容吧，而且手机端chrome访问都没有小卫士可以点啊。后来到深夜，实在困的不行就更改了原script获取的link，事先将css以及font下载好放置在项目结构中，这样就不用跳出去其他网站来获取这几个相应的resource了。拿自己的Nexus5试了下，底部的Weibo, Facebook, and Github分享框算是能出现了。
&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/MixedContent-homefooterpage.png&quot; width=&quot;260&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mixed-content-2-passwordless-auto-login-on-macos&quot;&gt;Mixed Content 2: Passwordless Auto login on MacOS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;前因:&lt;/strong&gt; 在阿里云服务平台上购买了服务器，每次SSH登录都要认证感觉不爽。&lt;br /&gt;
&lt;strong&gt;后果:&lt;/strong&gt; 不改变Mac上使用 &lt;strong&gt;Terminal.app&lt;/strong&gt; 的习惯，实现点击自动登录服务器。&lt;/p&gt;

&lt;p&gt;之前使用Mac自带Terminal.app的体验很好，主要是很喜欢terminal.app提供的Theme: pro，然后ta也提供了ssh功能。使用SecureCRT等软件，需要打开软件，然后找到相应主机再打开，再输入密码，这，太不纯粹。&lt;/p&gt;

&lt;p&gt;Google了一圈，感觉并么有多少够纯粹的方式，Solving过程中自己了解到相关的东西，用比较简单的方式搞定,分为两步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Login &lt;strong&gt;Passwordless&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Auto&lt;/strong&gt; Login&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;passwordless-login&quot;&gt;Passwordless Login&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://coolestguidesontheplanet.com/make-passwordless-ssh-connection-osx-10-9-mavericks-linux/&quot;&gt;Make a passwordless SSH Connection between MacOS and Linux Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这一步需要做的就是在本地生成一份公钥和私钥，然后将&lt;strong&gt;公钥&lt;/strong&gt;添加到服务器的认证列表中来实现会话中的Passwordless&lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;本地公私密钥生成&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 在～目录下创建并更换其权限
~$ mkdir .ssh 
~$ chmod go-rwx .ssh

＃生成公钥和私钥，命令中最后的双引号没有给出私钥的密码，所以才实现Passwordless访问
.ssh$ ssh-keygen -b 1024 -t rsa -f id_rsa -P &quot;&quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行完操作后本地端会生成 &lt;strong&gt;id_rsa&lt;/strong&gt; 以及 &lt;strong&gt;id_rsa.pub&lt;/strong&gt;。&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;远端公钥分享&lt;/h5&gt;
&lt;p&gt;将本地端生成 &lt;strong&gt;id_rsa.pub&lt;/strong&gt;的内容，拷贝到远端。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#远端创建
.ssh$ touch authorized_keys
#本地内容拷贝
.ssh$ cat id_rsa.pub
ssh-rsa  AAAAB3NzaC1yc2EAAAABIwAAAIEA2CtcmYRmQJX04pZnrTPrU68BZMk9YlbI6CUcFUp
RVw29p V7mxW16wd/q9z7n+xytqdp4wsAc/7+24ZVikMhhRetEGr3LSBz5gm9980oTPEy61+pDP2y
jafShe5xcszIUnQ rN1ohCuF7Y/a/TG6G6gaJGcLexUiwfTRtCAbpuzfU= username@yourcomputer.local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用&lt;strong&gt;Vim&lt;/strong&gt;编辑器将文件内容拷贝好后更改权限。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.ssh$ chmod u-w authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到此步之后再去SSH服务器可以实现Passwordless访问了。&lt;/p&gt;

&lt;h4 id=&quot;auto-login&quot;&gt;Auto Login&lt;/h4&gt;

&lt;p&gt;这一步需要做的就是将输入 &lt;strong&gt;ssh serverdomain&lt;/strong&gt; 的操作化成点击操作了。
Mac上创建后缀为.command的文件，输入内容 &lt;strong&gt;ssh user@serverdomainname&lt;/strong&gt;，将其放置在Dock栏中。
&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/MixedContent-AutoLoginFile.png&quot; width=&quot;260&quot; /&gt;
其中的user字符以及serverdomainname字符需要更换成相应项。 一般情况下是 ssh root@yourServerIP 了。
至此Passwordless Auto Login on Mac 就完事儿了。
&lt;img class=&quot;shadow&quot; src=&quot;/img/inPost/MixedContent-AutoLogin.png&quot; width=&quot;460&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/06/23/Mixed-Content/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/06/23/Mixed-Content/</guid>
        
        <category>前端</category>
        
        <category>Mac</category>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Hello Blog</title>
        <description>&lt;p&gt;“ Life got real, moving on. ”&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;Ethan 的 Blog 应是落地于此了。&lt;/p&gt;

&lt;p&gt;这一学期不出几日便要结束了，江南メ星也总算是更换了个瞎写东西的地方。&lt;/p&gt;

&lt;p&gt;先前的博文挂放在&lt;a href=&quot;http://www.iteye.com/&quot;&gt;iTeye&lt;/a&gt;平台上，想想有些地方应该是不酷的。譬如，私人定制性不强，不酷；不太习惯地富文本编辑器，不酷。。。总而言之，就是不酷吧！&lt;/p&gt;

&lt;p&gt;一件事不够酷，去做的积极性就不会高。之前生活中碰到的需要去记录、瞎写、总结的东西，却趁着&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;MarkDown&lt;/a&gt;的优雅体验都存放到设备本地了，而奈何自用的设备为乞丐版MacPro13，且加上捉急的文档管理习惯，总让自己觉得不纯粹，不酷。 记得去年在上海实习的时候应该就有所耳闻过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，很有时尚感。&lt;/p&gt;

&lt;p&gt;这种博客的搭建方式很受推荐，我个人也很是喜欢这种Blog Post出来的效果。
当然它还有些其他的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;流行的Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;GitHub Pages 提供的贴心服务，也不用去搞数据库、主机什么的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 让你更专注于写作。&lt;/li&gt;
  &lt;li&gt;可以修改下DNS加个CNAME绑定自己的域名。&lt;/li&gt;
  &lt;li&gt;Jekyll 较强的自定制性，各种模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然在这之前我对涉及到的Jekyll及ruby等是不熟悉的，所以也有去YouTube上过了套Jekyll的课程， 跟视频实践Demo &lt;a href=&quot;https://ethanpen.github.io/planets-of-the-universe/&quot;&gt;&lt;strong&gt;planets-of-the-universe&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;致谢&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;博客的Theme大致是基于有名的&lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog-jekyll&quot;&gt;Clean Blog-IronSummitMedia/startbootstrap-clean-blog-jekyll&lt;/a&gt;，以及 &lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io&quot;&gt;Huxpro&lt;/a&gt; 的部分修改，感谢作者！&lt;/li&gt;
  &lt;li&gt;感谢 Jekyll、Github Pages 和 Bootstrap!&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://EthanPen.github.io/2016/06/21/Hello-Blog/</link>
        <guid isPermaLink="true">http://EthanPen.github.io/2016/06/21/Hello-Blog/</guid>
        
        <category>Life</category>
        
        <category>Github</category>
        
        
      </item>
    
  </channel>
</rss>
